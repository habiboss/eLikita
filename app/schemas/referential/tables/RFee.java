/*
 * This file is generated by jOOQ.
*/
package schemas.referential.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import schemas.referential.Keys;
import schemas.referential.Referential;
import schemas.referential.tables.records.RFeeRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RFee extends TableImpl<RFeeRecord> {

    private static final long serialVersionUID = 1042321319;

    /**
     * The reference instance of <code>referential.r_fee</code>
     */
    public static final RFee R_FEE = new RFee();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RFeeRecord> getRecordType() {
        return RFeeRecord.class;
    }

    /**
     * The column <code>referential.r_fee.id</code>.
     */
    public final TableField<RFeeRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('referential.r_fee_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>referential.r_fee.fee_type</code>.
     */
    public final TableField<RFeeRecord, String> FEE_TYPE = createField("fee_type", org.jooq.impl.SQLDataType.VARCHAR.length(15), this, "");

    /**
     * The column <code>referential.r_fee.fees</code>.
     */
    public final TableField<RFeeRecord, BigDecimal> FEES = createField("fees", org.jooq.impl.SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>referential.r_fee.code</code>.
     */
    public final TableField<RFeeRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR.length(10), this, "");

    /**
     * Create a <code>referential.r_fee</code> table reference
     */
    public RFee() {
        this("r_fee", null);
    }

    /**
     * Create an aliased <code>referential.r_fee</code> table reference
     */
    public RFee(String alias) {
        this(alias, R_FEE);
    }

    private RFee(String alias, Table<RFeeRecord> aliased) {
        this(alias, aliased, null);
    }

    private RFee(String alias, Table<RFeeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Referential.REFERENTIAL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<RFeeRecord, Long> getIdentity() {
        return Keys.IDENTITY_R_FEE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RFeeRecord> getPrimaryKey() {
        return Keys.R_FEE_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RFeeRecord>> getKeys() {
        return Arrays.<UniqueKey<RFeeRecord>>asList(Keys.R_FEE_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RFee as(String alias) {
        return new RFee(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RFee rename(String name) {
        return new RFee(name, null);
    }
}
