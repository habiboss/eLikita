/*
 * This file is generated by jOOQ.
*/
package schemas.referential.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import schemas.referential.Keys;
import schemas.referential.Referential;
import schemas.referential.tables.records.RLevelRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RLevel extends TableImpl<RLevelRecord> {

    private static final long serialVersionUID = 2077830336;

    /**
     * The reference instance of <code>referential.r_level</code>
     */
    public static final RLevel R_LEVEL = new RLevel();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RLevelRecord> getRecordType() {
        return RLevelRecord.class;
    }

    /**
     * The column <code>referential.r_level.id</code>.
     */
    public final TableField<RLevelRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('referential.r_level_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>referential.r_level.level</code>.
     */
    public final TableField<RLevelRecord, String> LEVEL = createField("level", org.jooq.impl.SQLDataType.VARCHAR.length(25), this, "");

    /**
     * The column <code>referential.r_level.description</code>.
     */
    public final TableField<RLevelRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR.length(30), this, "");

    /**
     * Create a <code>referential.r_level</code> table reference
     */
    public RLevel() {
        this("r_level", null);
    }

    /**
     * Create an aliased <code>referential.r_level</code> table reference
     */
    public RLevel(String alias) {
        this(alias, R_LEVEL);
    }

    private RLevel(String alias, Table<RLevelRecord> aliased) {
        this(alias, aliased, null);
    }

    private RLevel(String alias, Table<RLevelRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Referential.REFERENTIAL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<RLevelRecord, Long> getIdentity() {
        return Keys.IDENTITY_R_LEVEL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RLevelRecord> getPrimaryKey() {
        return Keys.R_LEVEL_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RLevelRecord>> getKeys() {
        return Arrays.<UniqueKey<RLevelRecord>>asList(Keys.R_LEVEL_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RLevel as(String alias) {
        return new RLevel(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RLevel rename(String name) {
        return new RLevel(name, null);
    }
}
