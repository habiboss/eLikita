/*
 * This file is generated by jOOQ.
*/
package schemas.referential.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import schemas.referential.Keys;
import schemas.referential.Referential;
import schemas.referential.tables.records.RCategoryRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RCategory extends TableImpl<RCategoryRecord> {

    private static final long serialVersionUID = -511995591;

    /**
     * The reference instance of <code>referential.r_category</code>
     */
    public static final RCategory R_CATEGORY = new RCategory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RCategoryRecord> getRecordType() {
        return RCategoryRecord.class;
    }

    /**
     * The column <code>referential.r_category.id</code>.
     */
    public final TableField<RCategoryRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('referential.r_category_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>referential.r_category.name</code>.
     */
    public final TableField<RCategoryRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

    /**
     * The column <code>referential.r_category.description</code>.
     */
    public final TableField<RCategoryRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

    /**
     * Create a <code>referential.r_category</code> table reference
     */
    public RCategory() {
        this("r_category", null);
    }

    /**
     * Create an aliased <code>referential.r_category</code> table reference
     */
    public RCategory(String alias) {
        this(alias, R_CATEGORY);
    }

    private RCategory(String alias, Table<RCategoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private RCategory(String alias, Table<RCategoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Referential.REFERENTIAL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<RCategoryRecord, Long> getIdentity() {
        return Keys.IDENTITY_R_CATEGORY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RCategoryRecord> getPrimaryKey() {
        return Keys.R_CATEGORY_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RCategoryRecord>> getKeys() {
        return Arrays.<UniqueKey<RCategoryRecord>>asList(Keys.R_CATEGORY_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RCategory as(String alias) {
        return new RCategory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RCategory rename(String name) {
        return new RCategory(name, null);
    }
}
