/*
 * This file is generated by jOOQ.
*/
package schemas.referential.tables.daos;


import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import schemas.referential.tables.RDropTeachReason;
import schemas.referential.tables.records.RDropTeachReasonRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RDropTeachReasonDao extends DAOImpl<RDropTeachReasonRecord, schemas.referential.tables.pojos.RDropTeachReason, Long> {

    /**
     * Create a new RDropTeachReasonDao without any configuration
     */
    public RDropTeachReasonDao() {
        super(RDropTeachReason.R_DROP_TEACH_REASON, schemas.referential.tables.pojos.RDropTeachReason.class);
    }

    /**
     * Create a new RDropTeachReasonDao with an attached configuration
     */
    public RDropTeachReasonDao(Configuration configuration) {
        super(RDropTeachReason.R_DROP_TEACH_REASON, schemas.referential.tables.pojos.RDropTeachReason.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Long getId(schemas.referential.tables.pojos.RDropTeachReason object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<schemas.referential.tables.pojos.RDropTeachReason> fetchById(Long... values) {
        return fetch(RDropTeachReason.R_DROP_TEACH_REASON.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public schemas.referential.tables.pojos.RDropTeachReason fetchOneById(Long value) {
        return fetchOne(RDropTeachReason.R_DROP_TEACH_REASON.ID, value);
    }

    /**
     * Fetch records that have <code>reason IN (values)</code>
     */
    public List<schemas.referential.tables.pojos.RDropTeachReason> fetchByReason(String... values) {
        return fetch(RDropTeachReason.R_DROP_TEACH_REASON.REASON, values);
    }
}
