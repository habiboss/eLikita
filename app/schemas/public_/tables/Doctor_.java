/*
 * This file is generated by jOOQ.
*/
package schemas.public_.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import schemas.public_.Keys;
import schemas.public_.Public;
import schemas.public_.tables.records.Doctor_Record;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Doctor_ extends TableImpl<Doctor_Record> {

    private static final long serialVersionUID = 1117674870;

    /**
     * The reference instance of <code>public.doctor_</code>
     */
    public static final Doctor_ DOCTOR_ = new Doctor_();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Doctor_Record> getRecordType() {
        return Doctor_Record.class;
    }

    /**
     * The column <code>public.doctor_.id</code>.
     */
    public final TableField<Doctor_Record, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('doctor__id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.doctor_.address_fk</code>.
     */
    public final TableField<Doctor_Record, Long> ADDRESS_FK = createField("address_fk", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.doctor_.medical_center_fk</code>.
     */
    public final TableField<Doctor_Record, Long> MEDICAL_CENTER_FK = createField("medical_center_fk", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.doctor_.doctor_name</code>.
     */
    public final TableField<Doctor_Record, String> DOCTOR_NAME = createField("doctor_name", org.jooq.impl.SQLDataType.VARCHAR.length(100), this, "");

    /**
     * The column <code>public.doctor_.contact_fk</code>.
     */
    public final TableField<Doctor_Record, Long> CONTACT_FK = createField("contact_fk", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.doctor_.phone</code>.
     */
    public final TableField<Doctor_Record, Long> PHONE = createField("phone", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.doctor_.experience</code>.
     */
    public final TableField<Doctor_Record, String> EXPERIENCE = createField("experience", org.jooq.impl.SQLDataType.VARCHAR.length(100), this, "");

    /**
     * The column <code>public.doctor_.email</code>.
     */
    public final TableField<Doctor_Record, String> EMAIL = createField("email", org.jooq.impl.SQLDataType.VARCHAR.length(100), this, "");

    /**
     * The column <code>public.doctor_.comment</code>.
     */
    public final TableField<Doctor_Record, String> COMMENT = createField("comment", org.jooq.impl.SQLDataType.VARCHAR.length(100), this, "");

    /**
     * Create a <code>public.doctor_</code> table reference
     */
    public Doctor_() {
        this("doctor_", null);
    }

    /**
     * Create an aliased <code>public.doctor_</code> table reference
     */
    public Doctor_(String alias) {
        this(alias, DOCTOR_);
    }

    private Doctor_(String alias, Table<Doctor_Record> aliased) {
        this(alias, aliased, null);
    }

    private Doctor_(String alias, Table<Doctor_Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<Doctor_Record, Long> getIdentity() {
        return Keys.IDENTITY_DOCTOR_;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<Doctor_Record> getPrimaryKey() {
        return Keys.DOCTOR_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<Doctor_Record>> getKeys() {
        return Arrays.<UniqueKey<Doctor_Record>>asList(Keys.DOCTOR_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Doctor_ as(String alias) {
        return new Doctor_(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Doctor_ rename(String name) {
        return new Doctor_(name, null);
    }
}
