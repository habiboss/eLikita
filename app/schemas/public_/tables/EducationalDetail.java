/*
 * This file is generated by jOOQ.
*/
package schemas.public_.tables;


import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import schemas.public_.Keys;
import schemas.public_.Public;
import schemas.public_.tables.records.EducationalDetailRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EducationalDetail extends TableImpl<EducationalDetailRecord> {

    private static final long serialVersionUID = 1070670786;

    /**
     * The reference instance of <code>public.educational_detail</code>
     */
    public static final EducationalDetail EDUCATIONAL_DETAIL = new EducationalDetail();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EducationalDetailRecord> getRecordType() {
        return EducationalDetailRecord.class;
    }

    /**
     * The column <code>public.educational_detail.id</code>.
     */
    public final TableField<EducationalDetailRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('educational_detail_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.educational_detail.institution_name</code>.
     */
    public final TableField<EducationalDetailRecord, String> INSTITUTION_NAME = createField("institution_name", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

    /**
     * The column <code>public.educational_detail.qualification_fk</code>.
     */
    public final TableField<EducationalDetailRecord, Long> QUALIFICATION_FK = createField("qualification_fk", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.educational_detail.subject_fk</code>.
     */
    public final TableField<EducationalDetailRecord, Long> SUBJECT_FK = createField("subject_fk", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.educational_detail.date_qualification_started</code>.
     */
    public final TableField<EducationalDetailRecord, Timestamp> DATE_QUALIFICATION_STARTED = createField("date_qualification_started", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.educational_detail.date_qualification_ended</code>.
     */
    public final TableField<EducationalDetailRecord, Timestamp> DATE_QUALIFICATION_ENDED = createField("date_qualification_ended", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.educational_detail.final_grade</code>.
     */
    public final TableField<EducationalDetailRecord, BigDecimal> FINAL_GRADE = createField("final_grade", org.jooq.impl.SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.educational_detail.completed</code>.
     */
    public final TableField<EducationalDetailRecord, Boolean> COMPLETED = createField("completed", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.educational_detail.student_fk</code>.
     */
    public final TableField<EducationalDetailRecord, String> STUDENT_FK = createField("student_fk", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

    /**
     * Create a <code>public.educational_detail</code> table reference
     */
    public EducationalDetail() {
        this("educational_detail", null);
    }

    /**
     * Create an aliased <code>public.educational_detail</code> table reference
     */
    public EducationalDetail(String alias) {
        this(alias, EDUCATIONAL_DETAIL);
    }

    private EducationalDetail(String alias, Table<EducationalDetailRecord> aliased) {
        this(alias, aliased, null);
    }

    private EducationalDetail(String alias, Table<EducationalDetailRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<EducationalDetailRecord, Long> getIdentity() {
        return Keys.IDENTITY_EDUCATIONAL_DETAIL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<EducationalDetailRecord> getPrimaryKey() {
        return Keys.EDUCATIONAL_DETAIL_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<EducationalDetailRecord>> getKeys() {
        return Arrays.<UniqueKey<EducationalDetailRecord>>asList(Keys.EDUCATIONAL_DETAIL_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EducationalDetail as(String alias) {
        return new EducationalDetail(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EducationalDetail rename(String name) {
        return new EducationalDetail(name, null);
    }
}
