/*
 * This file is generated by jOOQ.
*/
package schemas.public_.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import schemas.public_.Keys;
import schemas.public_.Public;
import schemas.public_.tables.records.NoteRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Note extends TableImpl<NoteRecord> {

    private static final long serialVersionUID = -409832172;

    /**
     * The reference instance of <code>public.note</code>
     */
    public static final Note NOTE = new Note();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NoteRecord> getRecordType() {
        return NoteRecord.class;
    }

    /**
     * The column <code>public.note.id</code>.
     */
    public final TableField<NoteRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.note.batch</code>.
     */
    public final TableField<NoteRecord, String> BATCH = createField("batch", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>public.note.course</code>.
     */
    public final TableField<NoteRecord, String> COURSE = createField("course", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>public.note.attachment</code>.
     */
    public final TableField<NoteRecord, String> ATTACHMENT = createField("attachment", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>public.note.description</code>.
     */
    public final TableField<NoteRecord, Long> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.note.title</code>.
     */
    public final TableField<NoteRecord, Long> TITLE = createField("title", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.note.subject</code>.
     */
    public final TableField<NoteRecord, String> SUBJECT = createField("subject", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * Create a <code>public.note</code> table reference
     */
    public Note() {
        this("note", null);
    }

    /**
     * Create an aliased <code>public.note</code> table reference
     */
    public Note(String alias) {
        this(alias, NOTE);
    }

    private Note(String alias, Table<NoteRecord> aliased) {
        this(alias, aliased, null);
    }

    private Note(String alias, Table<NoteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<NoteRecord> getPrimaryKey() {
        return Keys.NOTE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<NoteRecord>> getKeys() {
        return Arrays.<UniqueKey<NoteRecord>>asList(Keys.NOTE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Note as(String alias) {
        return new Note(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Note rename(String name) {
        return new Note(name, null);
    }
}
