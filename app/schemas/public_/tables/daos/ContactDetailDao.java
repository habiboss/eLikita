/*
 * This file is generated by jOOQ.
*/
package schemas.public_.tables.daos;


import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import schemas.public_.tables.ContactDetail;
import schemas.public_.tables.records.ContactDetailRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ContactDetailDao extends DAOImpl<ContactDetailRecord, schemas.public_.tables.pojos.ContactDetail, Long> {

    /**
     * Create a new ContactDetailDao without any configuration
     */
    public ContactDetailDao() {
        super(ContactDetail.CONTACT_DETAIL, schemas.public_.tables.pojos.ContactDetail.class);
    }

    /**
     * Create a new ContactDetailDao with an attached configuration
     */
    public ContactDetailDao(Configuration configuration) {
        super(ContactDetail.CONTACT_DETAIL, schemas.public_.tables.pojos.ContactDetail.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Long getId(schemas.public_.tables.pojos.ContactDetail object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    public List<schemas.public_.tables.pojos.ContactDetail> fetchByEmail(String... values) {
        return fetch(ContactDetail.CONTACT_DETAIL.EMAIL, values);
    }

    /**
     * Fetch records that have <code>ermergency_address IN (values)</code>
     */
    public List<schemas.public_.tables.pojos.ContactDetail> fetchByErmergencyAddress(String... values) {
        return fetch(ContactDetail.CONTACT_DETAIL.ERMERGENCY_ADDRESS, values);
    }

    /**
     * Fetch records that have <code>ermergency_name IN (values)</code>
     */
    public List<schemas.public_.tables.pojos.ContactDetail> fetchByErmergencyName(String... values) {
        return fetch(ContactDetail.CONTACT_DETAIL.ERMERGENCY_NAME, values);
    }

    /**
     * Fetch records that have <code>ermergency_relation IN (values)</code>
     */
    public List<schemas.public_.tables.pojos.ContactDetail> fetchByErmergencyRelation(String... values) {
        return fetch(ContactDetail.CONTACT_DETAIL.ERMERGENCY_RELATION, values);
    }

    /**
     * Fetch records that have <code>ermergency_number IN (values)</code>
     */
    public List<schemas.public_.tables.pojos.ContactDetail> fetchByErmergencyNumber(String... values) {
        return fetch(ContactDetail.CONTACT_DETAIL.ERMERGENCY_NUMBER, values);
    }

    /**
     * Fetch records that have <code>primary_phoneno IN (values)</code>
     */
    public List<schemas.public_.tables.pojos.ContactDetail> fetchByPrimaryPhoneno(Long... values) {
        return fetch(ContactDetail.CONTACT_DETAIL.PRIMARY_PHONENO, values);
    }

    /**
     * Fetch records that have <code>secondary_phoneno IN (values)</code>
     */
    public List<schemas.public_.tables.pojos.ContactDetail> fetchBySecondaryPhoneno(Long... values) {
        return fetch(ContactDetail.CONTACT_DETAIL.SECONDARY_PHONENO, values);
    }

    /**
     * Fetch records that have <code>skype_address IN (values)</code>
     */
    public List<schemas.public_.tables.pojos.ContactDetail> fetchBySkypeAddress(String... values) {
        return fetch(ContactDetail.CONTACT_DETAIL.SKYPE_ADDRESS, values);
    }

    /**
     * Fetch records that have <code>student_fk IN (values)</code>
     */
    public List<schemas.public_.tables.pojos.ContactDetail> fetchByStudentFk(String... values) {
        return fetch(ContactDetail.CONTACT_DETAIL.STUDENT_FK, values);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<schemas.public_.tables.pojos.ContactDetail> fetchById(Long... values) {
        return fetch(ContactDetail.CONTACT_DETAIL.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public schemas.public_.tables.pojos.ContactDetail fetchOneById(Long value) {
        return fetchOne(ContactDetail.CONTACT_DETAIL.ID, value);
    }
}
