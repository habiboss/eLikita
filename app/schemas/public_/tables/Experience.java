/*
 * This file is generated by jOOQ.
*/
package schemas.public_.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import schemas.public_.Keys;
import schemas.public_.Public;
import schemas.public_.tables.records.ExperienceRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Experience extends TableImpl<ExperienceRecord> {

    private static final long serialVersionUID = -2078281737;

    /**
     * The reference instance of <code>public.experience</code>
     */
    public static final Experience EXPERIENCE = new Experience();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExperienceRecord> getRecordType() {
        return ExperienceRecord.class;
    }

    /**
     * The column <code>public.experience.id</code>.
     */
    public final TableField<ExperienceRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.experience.city</code>.
     */
    public final TableField<ExperienceRecord, String> CITY = createField("city", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>public.experience.country</code>.
     */
    public final TableField<ExperienceRecord, String> COUNTRY = createField("country", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>public.experience.employer_address</code>.
     */
    public final TableField<ExperienceRecord, String> EMPLOYER_ADDRESS = createField("employer_address", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>public.experience.employer_name</code>.
     */
    public final TableField<ExperienceRecord, String> EMPLOYER_NAME = createField("employer_name", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>public.experience.end_date</code>.
     */
    public final TableField<ExperienceRecord, String> END_DATE = createField("end_date", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>public.experience.job_title</code>.
     */
    public final TableField<ExperienceRecord, String> JOB_TITLE = createField("job_title", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>public.experience.responsibilities</code>.
     */
    public final TableField<ExperienceRecord, String> RESPONSIBILITIES = createField("responsibilities", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>public.experience.start_date</code>.
     */
    public final TableField<ExperienceRecord, String> START_DATE = createField("start_date", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * Create a <code>public.experience</code> table reference
     */
    public Experience() {
        this("experience", null);
    }

    /**
     * Create an aliased <code>public.experience</code> table reference
     */
    public Experience(String alias) {
        this(alias, EXPERIENCE);
    }

    private Experience(String alias, Table<ExperienceRecord> aliased) {
        this(alias, aliased, null);
    }

    private Experience(String alias, Table<ExperienceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ExperienceRecord> getPrimaryKey() {
        return Keys.EXPERIENCE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ExperienceRecord>> getKeys() {
        return Arrays.<UniqueKey<ExperienceRecord>>asList(Keys.EXPERIENCE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Experience as(String alias) {
        return new Experience(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Experience rename(String name) {
        return new Experience(name, null);
    }
}
