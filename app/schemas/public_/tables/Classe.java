/*
 * This file is generated by jOOQ.
*/
package schemas.public_.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import schemas.public_.Keys;
import schemas.public_.Public;
import schemas.public_.tables.records.ClasseRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Classe extends TableImpl<ClasseRecord> {

    private static final long serialVersionUID = 887808772;

    /**
     * The reference instance of <code>public.classe</code>
     */
    public static final Classe CLASSE = new Classe();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClasseRecord> getRecordType() {
        return ClasseRecord.class;
    }

    /**
     * The column <code>public.classe.id</code>.
     */
    public final TableField<ClasseRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('classe_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.classe.name_</code>.
     */
    public final TableField<ClasseRecord, String> NAME_ = createField("name_", org.jooq.impl.SQLDataType.VARCHAR.length(15), this, "");

    /**
     * The column <code>public.classe.class_type_fk</code>.
     */
    public final TableField<ClasseRecord, Long> CLASS_TYPE_FK = createField("class_type_fk", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.classe.level_fk</code>.
     */
    public final TableField<ClasseRecord, Long> LEVEL_FK = createField("level_fk", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.classe.description</code>.
     */
    public final TableField<ClasseRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

    /**
     * The column <code>public.classe.start_date</code>.
     */
    public final TableField<ClasseRecord, Timestamp> START_DATE = createField("start_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.classe.end_date</code>.
     */
    public final TableField<ClasseRecord, Timestamp> END_DATE = createField("end_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.classe.completed</code>.
     */
    public final TableField<ClasseRecord, Boolean> COMPLETED = createField("completed", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.classe.student_number</code>.
     */
    public final TableField<ClasseRecord, Long> STUDENT_NUMBER = createField("student_number", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.classe.class_number</code>.
     */
    public final TableField<ClasseRecord, Long> CLASS_NUMBER = createField("class_number", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.classe.student_no</code>.
     */
    public final TableField<ClasseRecord, String> STUDENT_NO = createField("student_no", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>public.classe.lecturer_fk</code>.
     */
    public final TableField<ClasseRecord, Long> LECTURER_FK = createField("lecturer_fk", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.classe.module_fk</code>.
     */
    public final TableField<ClasseRecord, Long> MODULE_FK = createField("module_fk", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>public.classe</code> table reference
     */
    public Classe() {
        this("classe", null);
    }

    /**
     * Create an aliased <code>public.classe</code> table reference
     */
    public Classe(String alias) {
        this(alias, CLASSE);
    }

    private Classe(String alias, Table<ClasseRecord> aliased) {
        this(alias, aliased, null);
    }

    private Classe(String alias, Table<ClasseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ClasseRecord, Long> getIdentity() {
        return Keys.IDENTITY_CLASSE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ClasseRecord> getPrimaryKey() {
        return Keys.CLASSE_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ClasseRecord>> getKeys() {
        return Arrays.<UniqueKey<ClasseRecord>>asList(Keys.CLASSE_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Classe as(String alias) {
        return new Classe(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Classe rename(String name) {
        return new Classe(name, null);
    }
}
