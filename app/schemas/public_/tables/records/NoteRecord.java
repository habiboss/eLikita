/*
 * This file is generated by jOOQ.
*/
package schemas.public_.tables.records;


import javax.annotation.Generated;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;

import schemas.public_.tables.Note;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NoteRecord extends UpdatableRecordImpl<NoteRecord> implements Record7<Long, String, String, String, Long, Long, String> {

    private static final long serialVersionUID = -2056627313;

    /**
     * Setter for <code>public.note.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.note.id</code>.
     */
    @NotNull
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.note.batch</code>.
     */
    public void setBatch(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.note.batch</code>.
     */
    @Size(max = 255)
    public String getBatch() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.note.course</code>.
     */
    public void setCourse(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.note.course</code>.
     */
    @Size(max = 255)
    public String getCourse() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.note.attachment</code>.
     */
    public void setAttachment(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.note.attachment</code>.
     */
    @Size(max = 255)
    public String getAttachment() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.note.description</code>.
     */
    public void setDescription(Long value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.note.description</code>.
     */
    public Long getDescription() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>public.note.title</code>.
     */
    public void setTitle(Long value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.note.title</code>.
     */
    public Long getTitle() {
        return (Long) get(5);
    }

    /**
     * Setter for <code>public.note.subject</code>.
     */
    public void setSubject(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.note.subject</code>.
     */
    @Size(max = 255)
    public String getSubject() {
        return (String) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row7<Long, String, String, String, Long, Long, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row7<Long, String, String, String, Long, Long, String> valuesRow() {
        return (Row7) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field1() {
        return Note.NOTE.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return Note.NOTE.BATCH;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return Note.NOTE.COURSE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return Note.NOTE.ATTACHMENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field5() {
        return Note.NOTE.DESCRIPTION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field6() {
        return Note.NOTE.TITLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field7() {
        return Note.NOTE.SUBJECT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getBatch();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getCourse();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getAttachment();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value5() {
        return getDescription();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value6() {
        return getTitle();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value7() {
        return getSubject();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NoteRecord value1(Long value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NoteRecord value2(String value) {
        setBatch(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NoteRecord value3(String value) {
        setCourse(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NoteRecord value4(String value) {
        setAttachment(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NoteRecord value5(Long value) {
        setDescription(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NoteRecord value6(Long value) {
        setTitle(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NoteRecord value7(String value) {
        setSubject(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NoteRecord values(Long value1, String value2, String value3, String value4, Long value5, Long value6, String value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached NoteRecord
     */
    public NoteRecord() {
        super(Note.NOTE);
    }

    /**
     * Create a detached, initialised NoteRecord
     */
    public NoteRecord(Long id, String batch, String course, String attachment, Long description, Long title, String subject) {
        super(Note.NOTE);

        set(0, id);
        set(1, batch);
        set(2, course);
        set(3, attachment);
        set(4, description);
        set(5, title);
        set(6, subject);
    }
}
