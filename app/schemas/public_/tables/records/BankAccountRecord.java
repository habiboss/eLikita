/*
 * This file is generated by jOOQ.
*/
package schemas.public_.tables.records;


import javax.annotation.Generated;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;

import schemas.public_.tables.BankAccount;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BankAccountRecord extends UpdatableRecordImpl<BankAccountRecord> implements Record4<Long, Long, String, Long> {

    private static final long serialVersionUID = -1394535052;

    /**
     * Setter for <code>public.bank_account.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.bank_account.id</code>.
     */
    @NotNull
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.bank_account.account_number</code>.
     */
    public void setAccountNumber(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.bank_account.account_number</code>.
     */
    public Long getAccountNumber() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.bank_account.sort_code</code>.
     */
    public void setSortCode(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.bank_account.sort_code</code>.
     */
    @Size(max = 255)
    public String getSortCode() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.bank_account.student_id</code>.
     */
    public void setStudentId(Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.bank_account.student_id</code>.
     */
    public Long getStudentId() {
        return (Long) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Long, Long, String, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Long, Long, String, Long> valuesRow() {
        return (Row4) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field1() {
        return BankAccount.BANK_ACCOUNT.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field2() {
        return BankAccount.BANK_ACCOUNT.ACCOUNT_NUMBER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return BankAccount.BANK_ACCOUNT.SORT_CODE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field4() {
        return BankAccount.BANK_ACCOUNT.STUDENT_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value2() {
        return getAccountNumber();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getSortCode();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value4() {
        return getStudentId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BankAccountRecord value1(Long value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BankAccountRecord value2(Long value) {
        setAccountNumber(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BankAccountRecord value3(String value) {
        setSortCode(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BankAccountRecord value4(Long value) {
        setStudentId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BankAccountRecord values(Long value1, Long value2, String value3, Long value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BankAccountRecord
     */
    public BankAccountRecord() {
        super(BankAccount.BANK_ACCOUNT);
    }

    /**
     * Create a detached, initialised BankAccountRecord
     */
    public BankAccountRecord(Long id, Long accountNumber, String sortCode, Long studentId) {
        super(BankAccount.BANK_ACCOUNT);

        set(0, id);
        set(1, accountNumber);
        set(2, sortCode);
        set(3, studentId);
    }
}
