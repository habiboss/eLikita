/*
 * This file is generated by jOOQ.
*/
package schemas.public_.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import schemas.public_.Keys;
import schemas.public_.Public;
import schemas.public_.tables.records.CourseRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Course extends TableImpl<CourseRecord> {

    private static final long serialVersionUID = -1478932961;

    /**
     * The reference instance of <code>public.course</code>
     */
    public static final Course COURSE = new Course();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CourseRecord> getRecordType() {
        return CourseRecord.class;
    }

    /**
     * The column <code>public.course.code</code>.
     */
    public final TableField<CourseRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>public.course.department</code>.
     */
    public final TableField<CourseRecord, String> DEPARTMENT = createField("department", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>public.course.title</code>.
     */
    public final TableField<CourseRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>public.course.status</code>.
     */
    public final TableField<CourseRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>public.course.id</code>.
     */
    public final TableField<CourseRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('course_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.course.description</code>.
     */
    public final TableField<CourseRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

    /**
     * The column <code>public.course.syllabus_fk</code>.
     */
    public final TableField<CourseRecord, Long> SYLLABUS_FK = createField("syllabus_fk", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.course.attendance_type_fk</code>.
     */
    public final TableField<CourseRecord, Long> ATTENDANCE_TYPE_FK = createField("attendance_type_fk", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.course.min_attendance_percentage</code>.
     */
    public final TableField<CourseRecord, Long> MIN_ATTENDANCE_PERCENTAGE = createField("min_attendance_percentage", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.course.total_working_days</code>.
     */
    public final TableField<CourseRecord, Long> TOTAL_WORKING_DAYS = createField("total_working_days", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.course.academic_year</code>.
     */
    public final TableField<CourseRecord, String> ACADEMIC_YEAR = createField("academic_year", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>public.course.faculty</code>.
     */
    public final TableField<CourseRecord, String> FACULTY = createField("faculty", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>public.course.location</code>.
     */
    public final TableField<CourseRecord, String> LOCATION = createField("location", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>public.course.mode_of_attendance</code>.
     */
    public final TableField<CourseRecord, String> MODE_OF_ATTENDANCE = createField("mode_of_attendance", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>public.course.start_date</code>.
     */
    public final TableField<CourseRecord, Timestamp> START_DATE = createField("start_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.course.tutor</code>.
     */
    public final TableField<CourseRecord, String> TUTOR = createField("tutor", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>public.course.year_of_study</code>.
     */
    public final TableField<CourseRecord, String> YEAR_OF_STUDY = createField("year_of_study", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * Create a <code>public.course</code> table reference
     */
    public Course() {
        this("course", null);
    }

    /**
     * Create an aliased <code>public.course</code> table reference
     */
    public Course(String alias) {
        this(alias, COURSE);
    }

    private Course(String alias, Table<CourseRecord> aliased) {
        this(alias, aliased, null);
    }

    private Course(String alias, Table<CourseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CourseRecord, Long> getIdentity() {
        return Keys.IDENTITY_COURSE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CourseRecord> getPrimaryKey() {
        return Keys.COURSE_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CourseRecord>> getKeys() {
        return Arrays.<UniqueKey<CourseRecord>>asList(Keys.COURSE_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Course as(String alias) {
        return new Course(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Course rename(String name) {
        return new Course(name, null);
    }
}
