/*
 * This file is generated by jOOQ.
*/
package schemas.administrator.tables.records;


import javax.annotation.Generated;
import javax.validation.constraints.Size;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;

import schemas.administrator.tables.LogInfo;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LogInfoRecord extends UpdatableRecordImpl<LogInfoRecord> implements Record4<Long, String, String, String> {

    private static final long serialVersionUID = -1124702307;

    /**
     * Setter for <code>administrator.log_info.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>administrator.log_info.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>administrator.log_info.log_name</code>.
     */
    public void setLogName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>administrator.log_info.log_name</code>.
     */
    @Size(max = 100)
    public String getLogName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>administrator.log_info.code</code>.
     */
    public void setCode(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>administrator.log_info.code</code>.
     */
    @Size(max = 100)
    public String getCode() {
        return (String) get(2);
    }

    /**
     * Setter for <code>administrator.log_info.description</code>.
     */
    public void setDescription(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>administrator.log_info.description</code>.
     */
    @Size(max = 100)
    public String getDescription() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Long, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Long, String, String, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field1() {
        return LogInfo.LOG_INFO.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return LogInfo.LOG_INFO.LOG_NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return LogInfo.LOG_INFO.CODE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return LogInfo.LOG_INFO.DESCRIPTION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getLogName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getCode();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getDescription();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LogInfoRecord value1(Long value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LogInfoRecord value2(String value) {
        setLogName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LogInfoRecord value3(String value) {
        setCode(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LogInfoRecord value4(String value) {
        setDescription(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LogInfoRecord values(Long value1, String value2, String value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached LogInfoRecord
     */
    public LogInfoRecord() {
        super(LogInfo.LOG_INFO);
    }

    /**
     * Create a detached, initialised LogInfoRecord
     */
    public LogInfoRecord(Long id, String logName, String code, String description) {
        super(LogInfo.LOG_INFO);

        set(0, id);
        set(1, logName);
        set(2, code);
        set(3, description);
    }
}
