/*
 * This file is generated by jOOQ.
*/
package schemas.administrator.tables;


import java.math.BigDecimal;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import schemas.administrator.Administrator;
import schemas.administrator.Keys;
import schemas.administrator.tables.records.FeeStudentRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FeeStudent extends TableImpl<FeeStudentRecord> {

    private static final long serialVersionUID = 1327688825;

    /**
     * The reference instance of <code>administrator.fee_student</code>
     */
    public static final FeeStudent FEE_STUDENT = new FeeStudent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FeeStudentRecord> getRecordType() {
        return FeeStudentRecord.class;
    }

    /**
     * The column <code>administrator.fee_student.id</code>.
     */
    public final TableField<FeeStudentRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('administrator.fee_student_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>administrator.fee_student.student_fk</code>.
     */
    public final TableField<FeeStudentRecord, String> STUDENT_FK = createField("student_fk", org.jooq.impl.SQLDataType.VARCHAR.length(30), this, "");

    /**
     * The column <code>administrator.fee_student.effective_from</code>.
     */
    public final TableField<FeeStudentRecord, Time> EFFECTIVE_FROM = createField("effective_from", org.jooq.impl.SQLDataType.TIME, this, "");

    /**
     * The column <code>administrator.fee_student.amount</code>.
     */
    public final TableField<FeeStudentRecord, BigDecimal> AMOUNT = createField("amount", org.jooq.impl.SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>administrator.fee_student.discount_fk</code>.
     */
    public final TableField<FeeStudentRecord, String> DISCOUNT_FK = createField("discount_fk", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>administrator.fee_student.due_date</code>.
     */
    public final TableField<FeeStudentRecord, Timestamp> DUE_DATE = createField("due_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>administrator.fee_student.last_date</code>.
     */
    public final TableField<FeeStudentRecord, Timestamp> LAST_DATE = createField("last_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>administrator.fee_student.fee_fk</code>.
     */
    public final TableField<FeeStudentRecord, Long> FEE_FK = createField("fee_fk", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>administrator.fee_student.status_fk</code>.
     */
    public final TableField<FeeStudentRecord, Long> STATUS_FK = createField("status_fk", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>administrator.fee_student</code> table reference
     */
    public FeeStudent() {
        this("fee_student", null);
    }

    /**
     * Create an aliased <code>administrator.fee_student</code> table reference
     */
    public FeeStudent(String alias) {
        this(alias, FEE_STUDENT);
    }

    private FeeStudent(String alias, Table<FeeStudentRecord> aliased) {
        this(alias, aliased, null);
    }

    private FeeStudent(String alias, Table<FeeStudentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Administrator.ADMINISTRATOR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<FeeStudentRecord, Long> getIdentity() {
        return Keys.IDENTITY_FEE_STUDENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<FeeStudentRecord> getPrimaryKey() {
        return Keys.FEE_STUDENT_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FeeStudentRecord>> getKeys() {
        return Arrays.<UniqueKey<FeeStudentRecord>>asList(Keys.FEE_STUDENT_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FeeStudent as(String alias) {
        return new FeeStudent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FeeStudent rename(String name) {
        return new FeeStudent(name, null);
    }
}
