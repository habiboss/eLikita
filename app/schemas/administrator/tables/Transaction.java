/*
 * This file is generated by jOOQ.
*/
package schemas.administrator.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import schemas.administrator.Administrator;
import schemas.administrator.Keys;
import schemas.administrator.tables.records.TransactionRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Transaction extends TableImpl<TransactionRecord> {

    private static final long serialVersionUID = -912935362;

    /**
     * The reference instance of <code>administrator.transaction</code>
     */
    public static final Transaction TRANSACTION = new Transaction();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransactionRecord> getRecordType() {
        return TransactionRecord.class;
    }

    /**
     * The column <code>administrator.transaction.id</code>.
     */
    public final TableField<TransactionRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('administrator.transaction_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>administrator.transaction.fee_fk</code>.
     */
    public final TableField<TransactionRecord, String> FEE_FK = createField("fee_fk", org.jooq.impl.SQLDataType.VARCHAR.length(10), this, "");

    /**
     * The column <code>administrator.transaction.student_fk</code>.
     */
    public final TableField<TransactionRecord, String> STUDENT_FK = createField("student_fk", org.jooq.impl.SQLDataType.VARCHAR.length(30), this, "");

    /**
     * The column <code>administrator.transaction.amount</code>.
     */
    public final TableField<TransactionRecord, String> AMOUNT = createField("amount", org.jooq.impl.SQLDataType.VARCHAR.length(10), this, "");

    /**
     * The column <code>administrator.transaction.description</code>.
     */
    public final TableField<TransactionRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

    /**
     * The column <code>administrator.transaction.remarks</code>.
     */
    public final TableField<TransactionRecord, String> REMARKS = createField("remarks", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

    /**
     * Create a <code>administrator.transaction</code> table reference
     */
    public Transaction() {
        this("transaction", null);
    }

    /**
     * Create an aliased <code>administrator.transaction</code> table reference
     */
    public Transaction(String alias) {
        this(alias, TRANSACTION);
    }

    private Transaction(String alias, Table<TransactionRecord> aliased) {
        this(alias, aliased, null);
    }

    private Transaction(String alias, Table<TransactionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Administrator.ADMINISTRATOR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TransactionRecord, Long> getIdentity() {
        return Keys.IDENTITY_TRANSACTION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TransactionRecord> getPrimaryKey() {
        return Keys.TRANSACTION_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TransactionRecord>> getKeys() {
        return Arrays.<UniqueKey<TransactionRecord>>asList(Keys.TRANSACTION_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Transaction as(String alias) {
        return new Transaction(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Transaction rename(String name) {
        return new Transaction(name, null);
    }
}
