/*
 * This file is generated by jOOQ.
*/
package schemas.administrator.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import schemas.administrator.Administrator;
import schemas.administrator.Keys;
import schemas.administrator.tables.records.AcademicYearRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AcademicYear extends TableImpl<AcademicYearRecord> {

    private static final long serialVersionUID = -662713626;

    /**
     * The reference instance of <code>administrator.academic_year</code>
     */
    public static final AcademicYear ACADEMIC_YEAR = new AcademicYear();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AcademicYearRecord> getRecordType() {
        return AcademicYearRecord.class;
    }

    /**
     * The column <code>administrator.academic_year.id</code>.
     */
    public final TableField<AcademicYearRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('administrator.r_academic_year_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>administrator.academic_year.status_fk</code>.
     */
    public final TableField<AcademicYearRecord, Long> STATUS_FK = createField("status_fk", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>administrator.academic_year.end_month_fk</code>.
     */
    public final TableField<AcademicYearRecord, Long> END_MONTH_FK = createField("end_month_fk", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>administrator.academic_year.start_month_fk</code>.
     */
    public final TableField<AcademicYearRecord, Long> START_MONTH_FK = createField("start_month_fk", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>administrator.academic_year.end_year_fk</code>.
     */
    public final TableField<AcademicYearRecord, Long> END_YEAR_FK = createField("end_year_fk", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>administrator.academic_year.start_year_fk</code>.
     */
    public final TableField<AcademicYearRecord, Long> START_YEAR_FK = createField("start_year_fk", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>administrator.academic_year</code> table reference
     */
    public AcademicYear() {
        this("academic_year", null);
    }

    /**
     * Create an aliased <code>administrator.academic_year</code> table reference
     */
    public AcademicYear(String alias) {
        this(alias, ACADEMIC_YEAR);
    }

    private AcademicYear(String alias, Table<AcademicYearRecord> aliased) {
        this(alias, aliased, null);
    }

    private AcademicYear(String alias, Table<AcademicYearRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Administrator.ADMINISTRATOR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AcademicYearRecord, Long> getIdentity() {
        return Keys.IDENTITY_ACADEMIC_YEAR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AcademicYearRecord> getPrimaryKey() {
        return Keys.ACADEMIC_YEAR_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AcademicYearRecord>> getKeys() {
        return Arrays.<UniqueKey<AcademicYearRecord>>asList(Keys.ACADEMIC_YEAR_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AcademicYear as(String alias) {
        return new AcademicYear(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AcademicYear rename(String name) {
        return new AcademicYear(name, null);
    }
}
