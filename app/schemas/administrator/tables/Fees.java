/*
 * This file is generated by jOOQ.
*/
package schemas.administrator.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import schemas.administrator.Administrator;
import schemas.administrator.Keys;
import schemas.administrator.tables.records.FeesRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Fees extends TableImpl<FeesRecord> {

    private static final long serialVersionUID = 534452790;

    /**
     * The reference instance of <code>administrator.fees</code>
     */
    public static final Fees FEES = new Fees();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FeesRecord> getRecordType() {
        return FeesRecord.class;
    }

    /**
     * The column <code>administrator.fees.id</code>.
     */
    public final TableField<FeesRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('administrator.fees_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>administrator.fees.fee_heading</code>.
     */
    public final TableField<FeesRecord, String> FEE_HEADING = createField("fee_heading", org.jooq.impl.SQLDataType.VARCHAR.length(20), this, "");

    /**
     * The column <code>administrator.fees.amount</code>.
     */
    public final TableField<FeesRecord, BigDecimal> AMOUNT = createField("amount", org.jooq.impl.SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>administrator.fees.class_fk</code>.
     */
    public final TableField<FeesRecord, String> CLASS_FK = createField("class_fk", org.jooq.impl.SQLDataType.VARCHAR.length(15), this, "");

    /**
     * The column <code>administrator.fees.fee_type_fk</code>.
     */
    public final TableField<FeesRecord, String> FEE_TYPE_FK = createField("fee_type_fk", org.jooq.impl.SQLDataType.VARCHAR.length(15), this, "");

    /**
     * The column <code>administrator.fees.code</code>.
     */
    public final TableField<FeesRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR.length(10), this, "");

    /**
     * Create a <code>administrator.fees</code> table reference
     */
    public Fees() {
        this("fees", null);
    }

    /**
     * Create an aliased <code>administrator.fees</code> table reference
     */
    public Fees(String alias) {
        this(alias, FEES);
    }

    private Fees(String alias, Table<FeesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Fees(String alias, Table<FeesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Administrator.ADMINISTRATOR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<FeesRecord, Long> getIdentity() {
        return Keys.IDENTITY_FEES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<FeesRecord> getPrimaryKey() {
        return Keys.FEES_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FeesRecord>> getKeys() {
        return Arrays.<UniqueKey<FeesRecord>>asList(Keys.FEES_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Fees as(String alias) {
        return new Fees(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Fees rename(String name) {
        return new Fees(name, null);
    }
}
