/*
 * This file is generated by jOOQ.
*/
package schemas.administrator.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import schemas.administrator.Administrator;
import schemas.administrator.Keys;
import schemas.administrator.tables.records.TeachRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Teach extends TableImpl<TeachRecord> {

    private static final long serialVersionUID = 543810668;

    /**
     * The reference instance of <code>administrator.teach</code>
     */
    public static final Teach TEACH = new Teach();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TeachRecord> getRecordType() {
        return TeachRecord.class;
    }

    /**
     * The column <code>administrator.teach.id</code>.
     */
    public final TableField<TeachRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('administrator.teach_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>administrator.teach.instructor_fk</code>.
     */
    public final TableField<TeachRecord, String> INSTRUCTOR_FK = createField("instructor_fk", org.jooq.impl.SQLDataType.VARCHAR.length(30), this, "");

    /**
     * The column <code>administrator.teach.class_fk</code>.
     */
    public final TableField<TeachRecord, String> CLASS_FK = createField("class_fk", org.jooq.impl.SQLDataType.VARCHAR.length(10), this, "");

    /**
     * The column <code>administrator.teach.start_date</code>.
     */
    public final TableField<TeachRecord, Timestamp> START_DATE = createField("start_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>administrator.teach.end_date</code>.
     */
    public final TableField<TeachRecord, Timestamp> END_DATE = createField("end_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>administrator.teach.drop_teach_reason_fk</code>.
     */
    public final TableField<TeachRecord, Long> DROP_TEACH_REASON_FK = createField("drop_teach_reason_fk", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>administrator.teach.teach_outcome_fk</code>.
     */
    public final TableField<TeachRecord, Long> TEACH_OUTCOME_FK = createField("teach_outcome_fk", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>administrator.teach</code> table reference
     */
    public Teach() {
        this("teach", null);
    }

    /**
     * Create an aliased <code>administrator.teach</code> table reference
     */
    public Teach(String alias) {
        this(alias, TEACH);
    }

    private Teach(String alias, Table<TeachRecord> aliased) {
        this(alias, aliased, null);
    }

    private Teach(String alias, Table<TeachRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Administrator.ADMINISTRATOR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TeachRecord, Long> getIdentity() {
        return Keys.IDENTITY_TEACH;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TeachRecord> getPrimaryKey() {
        return Keys.TEACH_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TeachRecord>> getKeys() {
        return Arrays.<UniqueKey<TeachRecord>>asList(Keys.TEACH_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Teach as(String alias) {
        return new Teach(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Teach rename(String name) {
        return new Teach(name, null);
    }
}
