/*
 * This file is generated by jOOQ.
*/
package schemas.administrator;


import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Catalog;
import org.jooq.Sequence;
import org.jooq.Table;
import org.jooq.impl.SchemaImpl;

import schemas.DefaultCatalog;
import schemas.administrator.tables.AcademicYear;
import schemas.administrator.tables.Attendance;
import schemas.administrator.tables.ClassSchedule;
import schemas.administrator.tables.ContactPersonStudent;
import schemas.administrator.tables.FeeStudent;
import schemas.administrator.tables.Fees;
import schemas.administrator.tables.InstructorPresence;
import schemas.administrator.tables.StudentPresence;
import schemas.administrator.tables.Teach;
import schemas.administrator.tables.Transaction;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Administrator extends SchemaImpl {

    private static final long serialVersionUID = -910934471;

    /**
     * The reference instance of <code>administrator</code>
     */
    public static final Administrator ADMINISTRATOR = new Administrator();

    /**
     * The table <code>administrator.academic_year</code>.
     */
    public final AcademicYear ACADEMIC_YEAR = schemas.administrator.tables.AcademicYear.ACADEMIC_YEAR;

    /**
     * The table <code>administrator.attendance</code>.
     */
    public final Attendance ATTENDANCE = schemas.administrator.tables.Attendance.ATTENDANCE;

    /**
     * The table <code>administrator.class_schedule</code>.
     */
    public final ClassSchedule CLASS_SCHEDULE = schemas.administrator.tables.ClassSchedule.CLASS_SCHEDULE;

    /**
     * The table <code>administrator.contact_person_student</code>.
     */
    public final ContactPersonStudent CONTACT_PERSON_STUDENT = schemas.administrator.tables.ContactPersonStudent.CONTACT_PERSON_STUDENT;

    /**
     * The table <code>administrator.fee_student</code>.
     */
    public final FeeStudent FEE_STUDENT = schemas.administrator.tables.FeeStudent.FEE_STUDENT;

    /**
     * The table <code>administrator.fees</code>.
     */
    public final Fees FEES = schemas.administrator.tables.Fees.FEES;

    /**
     * The table <code>administrator.instructor_presence</code>.
     */
    public final InstructorPresence INSTRUCTOR_PRESENCE = schemas.administrator.tables.InstructorPresence.INSTRUCTOR_PRESENCE;

    /**
     * The table <code>administrator.student_presence</code>.
     */
    public final StudentPresence STUDENT_PRESENCE = schemas.administrator.tables.StudentPresence.STUDENT_PRESENCE;

    /**
     * The table <code>administrator.teach</code>.
     */
    public final Teach TEACH = schemas.administrator.tables.Teach.TEACH;

    /**
     * The table <code>administrator.transaction</code>.
     */
    public final Transaction TRANSACTION = schemas.administrator.tables.Transaction.TRANSACTION;

    /**
     * No further instances allowed
     */
    private Administrator() {
        super("administrator", null);
    }


    /**
     * {@inheritDoc}
     */
    @Override
    public Catalog getCatalog() {
        return DefaultCatalog.DEFAULT_CATALOG;
    }

    @Override
    public final List<Sequence<?>> getSequences() {
        List result = new ArrayList();
        result.addAll(getSequences0());
        return result;
    }

    private final List<Sequence<?>> getSequences0() {
        return Arrays.<Sequence<?>>asList(
            Sequences.ACADEMIC_YEAR_ID_SEQ,
            Sequences.ATTENDANCE_ID_SEQ,
            Sequences.CLASS_SCHEDULE_ID_SEQ,
            Sequences.CONTACT_PERSON_STUDENT_ID_SEQ,
            Sequences.FEE_STUDENT_ID_SEQ,
            Sequences.FEES_ID_SEQ,
            Sequences.INSTRUCTOR_PRESENCE_ID_SEQ,
            Sequences.STUDENT_PRESENCE_ID_SEQ,
            Sequences.TEACH_ID_SEQ,
            Sequences.TRANSACTION_ID_SEQ);
    }

    @Override
    public final List<Table<?>> getTables() {
        List result = new ArrayList();
        result.addAll(getTables0());
        return result;
    }

    private final List<Table<?>> getTables0() {
        return Arrays.<Table<?>>asList(
            AcademicYear.ACADEMIC_YEAR,
            Attendance.ATTENDANCE,
            ClassSchedule.CLASS_SCHEDULE,
            ContactPersonStudent.CONTACT_PERSON_STUDENT,
            FeeStudent.FEE_STUDENT,
            Fees.FEES,
            InstructorPresence.INSTRUCTOR_PRESENCE,
            StudentPresence.STUDENT_PRESENCE,
            Teach.TEACH,
            Transaction.TRANSACTION);
    }
}
